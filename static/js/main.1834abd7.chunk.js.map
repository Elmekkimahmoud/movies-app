{"version":3,"sources":["movies.js","App.js","serviceWorker.js","index.js"],"names":["Movies","className","this","props","lstofmovies","map","el","i","key","src","name","date","rate","Component","App","modalFunct","setState","display","findMovie","e","findName","target","value","searchFunct","fltrList","state","listmov","filter","toUpperCase","includes","startFunct","n","starlength","fltrList2","length","addFunct","newmov","Ptimage","Ptname","Ptdate","Ptrate","putName","putimage","putdate","putrate","padEnd","closeAction","placeholder","type","onChange","onClick","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1834abd7.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nclass Movies  extends Component {\r\n\r\n    render() { \r\n        return ( \r\n\r\n            <div className=\"movies\"> \r\n                {this.props.lstofmovies.map((el,i) => \r\n                \r\n                <div key={i} className='movie-info'>\r\n                    <img src={el.src} />\r\n                    <span> {el.name} </span>\r\n                    <span> {el.date} </span>\r\n                    <span> {el.rate}</span>   \r\n                    \r\n                    </div>   )}\r\n                \r\n          </div>\r\n                \r\n\r\n         );\r\n    }\r\n}\r\n \r\nexport default Movies ;","import React, { Component } from 'react';\nimport './App.css';\nimport Movies from './movies';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { \n      listmov: [{src:\"https://myegy.io/files/img/content/9/541/1575724695.500_1000.jpg\", name: 'Jumanji: The Next Level',date: 2019, rate: '☆☆☆☆' },\n                {src:'https://images-na.ssl-images-amazon.com/images/I/51leiIQ5zpL._SX359_BO1,204,203,200_.jpg',name: 'Frozen II',date: 2019, rate: '☆☆☆' } ,\n                {src:'https://i.ytimg.com/vi/r0n2fBeRUGs/maxresdefault.jpg', name: 'Extrême tension',date: 2019, rate: '☆☆☆☆' }] ,\n\n       display:'modal',\n      findName:'',\n      Ptname:'',\n      Ptimage:'',\n      Ptdate:0,\n      Ptrate:'',\n      \n     }\n\n\n  }\n\n  modalFunct=()=>{\n    this.setState( { display:'modal2'})\n  }\n  \n  findMovie=(e)=>{\n    this.setState({findName:e.target.value});\n\n  }\n  \n  searchFunct=()=>{\n\n     const fltrList= this.state.listmov.filter(el=> el.name.toUpperCase().includes(this.state.findName.toUpperCase()) )\n     this.setState({listmov:fltrList })\n     \n  }\nstartFunct=(n)=>{\nvar starlength=n\nconst fltrList2= this.state.listmov.filter(el=> el.rate.length===starlength )\nthis.setState({listmov:fltrList2 })\n\n}\n\n  addFunct=()=>{\n    const newmov={src:this.state.Ptimage, name:this.state.Ptname, date:this.state.Ptdate, rate:this.state.Ptrate}\n    this.setState( {listmov:[...this.state.listmov, newmov]},\n    )\n  \n  }\n  putName=(e)=>{\n    this.setState({\n      Ptname: e.target.value\n    })\n  }\n  putimage=(e)=>{\n    this.setState({\n      Ptimage: e.target.value\n    })}\n    putdate=(e)=>{\n      this.setState({\n        Ptdate: e.target.value\n      })}\n      putrate=(e)=>{\n        this.setState({\n          Ptrate: this.state.Ptrate.padEnd(e.target.value,'☆')\n          \n        }) }\n        \ncloseAction=()=>{\n  this.setState({display:'modal'})\n}\n     \n  render() { \n    return ( \n      <section className=\"container\">\n\n      <div className=\"search\">\n        <input placeholder='  type movie name'   type='text' onChange={this.findMovie}/>\n        <button  onClick={this.searchFunct}> Search</button>\n        <span onClick={()=>{this.startFunct(1)}}>☆</span>\n        <span onClick={()=>{this.startFunct(2)}}>☆</span>\n        <span onClick={()=>{this.startFunct(3)}}>☆</span>\n        <span onClick={()=>{this.startFunct(4)}}>☆</span>\n        <span onClick={()=>{this.startFunct(5)}}>☆</span>\n\n      </div>\n      <Movies lstofmovies ={this.state.listmov} findName={this.state.findName}  addFunct={this.state.addFunct}/>\n      \n      <img src='https://encrypted-tbn0.gstatic.com/images?q=tbn%3AANd9GcQPAUzWKoZXFD6Mb9v9pVLar5Hfn2IC__6167FN0LzHKm63p47g' onClick={this.modalFunct} />\n      \n      <div  className={this.state.display}>\n          <div className=\"modal-content\">\n             <span className=\"close\" onClick={this.closeAction}>&times;</span>\n              <h2> ADD NEW MOVIE </h2>\n            <label> Name: </label>\n            <input  placeholder='Put movie name'  onChange={this.putName}  />\n            <label> image: </label>\n            <input  placeholder='Put movie image' onChange={this.putimage} />\n            <label> Date: </label>\n            <input  placeholder='Put movie date'  onChange={this.putdate}/>\n            <label> Rate: </label>\n            <input  placeholder='Put movie Rate'  onChange={this.putrate}/>\n            <button onClick={this.addFunct} > Add </button>\n          </div>\n      </div>\n\n      \n    </section>\n    );\n  }\n}\n\n \nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}